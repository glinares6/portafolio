
iniciar proyecto
    via cli
        $ npm i -g @nestjs/cli
        $ nest new project-name

        forzar tipado
            nest new proyect-name --strict

        swc ~ fast-box
            npm run start -- -b swc


        create CRUD fast
            nest g resource [name]
            nest g controller [name]
            nest g service [name]

            
    clene proyecto 
        git clone https://github.com/nestjs/typescript-starter.git project

        cd project
        npm install
        npm run start

            si se quiere usar javascript 
                git clone https://github.com/nestjs/javascript-starter.git project


        
    crear manualmente 
        archivois base (configuraciÃ³n,etc por si mismo)
            npm i --save @nestjs/core @nestjs/common rxjs reflect-metadata



            cambiar-statuts
                @HttpCode(...)

            inyectar libreria
                @Res()
                findAll(@Res() response)
                    para ambos enfoques
                        @Res({ passthrough: true })

            router propios
                response.status(200).send()

            importar todas las peticiones
                @types/express

            parametro 
                @types/express
                @Body()
                @Query()
            

    SERVER STATIC
        https://docs.nestjs.com/recipes/serve-static
            all files
                https://stackoverflow.com/questions/63429380/how-to-serve-static-images-in-nestjs

        npm install --save @nestjs/serve-static
        
    Database
        mysql or mariadb
            npm install --save @nestjs/typeorm typeorm mysql2

        implements help
            https://medium.com/@moisescastro_15074/como-crear-un-crud-utilizando-nestjs-typeorm-y-postgressql-1ff604264e46
      

        typeORM
            relations 
                https://typeorm.io/many-to-one-one-to-many-relations

        DW
            https://desarrolloweb.com/articulos/relacion-uno-a-muchos-typeorm-nest

    CORS
        https://github.com/expressjs/cors#configuration-options

            CORS Asynchronously
                https://github.com/expressjs/cors#configuring-cors-asynchronously  

    FILE UPLOAD
        npm i -D @types/multer  

        upload local server
            https://blog.bitsrc.io/upload-file-with-nestjs-d7dd74701b38

            https://stackoverflow.com/questions/61573872/typescript-object-is-possibly-null-when-getting-files-from-event

        CLIENT
            https://bommidinaveen.medium.com/nestjs-file-upload-2d5c36d34dff

        async await
            update 
                https://kamilmysliwiec.com/typescript-2-1-introduction-async-await

                https://github.com/nestjs/nest/issues/2136


    CRON
       https://docs.nestjs.com/techniques/task-scheduling 

    DOCKER
        IMAGE POSTGRES
            docker compose up -d postgres

    
iniciamos el proyecto 
    cd newProyect 
    npm run start





tomar en cuenta 
    npm notice 
    npm notice New minor version of npm available! 9.6.1 -> 9.8.1
    npm notice Changelog: https://github.com/npm/cli/releases/tag/v9.8.1
    npm notice Run npm install -g npm@9.8.1 to update!
    npm notice 